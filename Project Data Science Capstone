Skip to main content
Untitled0.ipynb
Untitled0.ipynb_Notebook unstarred
All changes saved
[33]
9s
pip install yfinance
Requirement already satisfied: yfinance in /usr/local/lib/python3.10/dist-packages (0.2.40)
Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.0.3)
Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.25.2)
Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.31.0)
Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.10/dist-packages (from yfinance) (0.0.11)
Requirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.9.4)
Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.2.2)
Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2023.4)
Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.4.4)
Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.10/dist-packages (from yfinance) (3.17.5)
Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.12.3)
Requirement already satisfied: html5lib>=1.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.1)
Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)
Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (1.16.0)
Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)
Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.0->yfinance) (2.8.2)
Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.0->yfinance) (2024.1)
Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (2.0.7)
Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (2024.6.2)
[31]
0s
import yfinance as yf
import pandas as pd

# Step 1: Fetch stock data for Tesla
tesla_data = yf.download('TSLA', start='2023-01-01', end='2023-12-31')

# Step 2: Reset index
tesla_data.reset_index(inplace=True)

# Step 3: Display first five rows

[*********************100%%**********************]  1 of 1 completed        Date        Open        High         Low       Close   Adj Close  \
0 2023-01-03  118.470001  118.800003  104.639999  108.099998  108.099998   
1 2023-01-04  109.110001  114.589996  107.519997  113.639999  113.639999   
2 2023-01-05  110.510002  111.750000  107.160004  110.339996  110.339996   
3 2023-01-06  103.000000  114.389999  101.809998  113.059998  113.059998   
4 2023-01-09  118.959999  123.519997  117.110001  119.769997  119.769997   

      Volume  
0  231402800  
1  180389000  
2  157986300  
3  220911100  
4  190284000  

[34]
0s
import requests
from bs4 import BeautifulSoup
import pandas as pd

# Step 1: Fetch HTML content
url = 'https://example.com/tesla-revenue-data'
response = requests.get(url)
html_content = response.content

# Step 2: Parse HTML using BeautifulSoup


Next steps:
[35]
0s
import yfinance as yf
import pandas as pd

# Step 1: Fetch stock data for GameStop (GME)
gme_data = yf.download('GME', start='2023-01-01', end='2023-12-31')

# Step 2: Reset index
gme_data.reset_index(inplace=True)

# Step 3: Display first five rows
print(gme_data.head())

[*********************100%%**********************]  1 of 1 completed        Date       Open       High        Low      Close  Adj Close   Volume
0 2023-01-03  18.639999  19.260000  17.090000  17.200001  17.200001  5135200
1 2023-01-04  17.250000  17.930000  16.900000  17.320000  17.320000  3939300
2 2023-01-05  17.059999  17.260000  15.890000  16.219999  16.219999  6066200
3 2023-01-06  16.000000  16.570000  15.410000  16.459999  16.459999  4823400
4 2023-01-09  16.650000  17.129999  16.360001  16.379999  16.379999  3522600

[36]
1s
import requests
from bs4 import BeautifulSoup
import pandas as pd

# Step 1: Fetch HTML content
url = 'https://example.com/gme-revenue-data'
response = requests.get(url)
html_content = response.content

# Step 2: Parse HTML using BeautifulSoup
soup = BeautifulSoup(html_content, 'html.parser')

# Step 3: Find and extract data
# Example: Assume revenue data is in a table with class 'revenue-table'
revenue_table = soup.find('table', class_='revenue-table')

# Step 4: Process data into DataFrame
# Example: Assuming data is structured in rows and columns
data = []
for row in revenue_table.find_all('tr'):
    row_data = [cell.text.strip() for cell in row.find_all('td')]
    data.append(row_data)

# Create DataFrame
gme_revenue = pd.DataFrame(data, columns=['Date', 'Revenue'])

# Step 5: Display last five rows
print(gme_revenue.tail())


Next steps:
[37]
1s
import yfinance as yf
import matplotlib.pyplot as plt

# Function to fetch Tesla stock data
def fetch_tesla_data():
    tesla_data = yf.download('TSLA', start='2023-01-01', end='2023-12-31')
    return tesla_data

# Function to create graph
def make_graph(data, title):
    plt.figure(figsize=(12, 6))
    plt.plot(data.index, data['Close'], label='Close Price', marker='o', linestyle='-', color='b')
    plt.title(title)
    plt.xlabel('Date')
    plt.ylabel('Stock Price ($)')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Step 1: Fetch Tesla stock data
tesla_data = fetch_tesla_data()

# Step 2: Plot Tesla stock data using make_graph function
make_graph(tesla_data, title='Tesla Stock Price (2023)')


[38]
1s
# Step 1: Fetch GameStop stock data
gme_data = fetch_gme_data()

# Step 2: Plot GameStop stock data using make_graph function
make_graph(gme_data, title='GameStop Stock Price (2023)')


Colab paid products - Cancel contracts here
  0s
completed at 16:26
[ { 'x': x_data, 'y': y_data, 'type': 'bar', 'name': column_name }
